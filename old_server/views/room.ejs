<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/PlayGround.css">
    <link rel="stylesheet" href="/css/room.css">
    <title>Room</title>
</head>
<body>

<% if(currentUser) { %>

    <%- include('./partials/sidebar') %>


        <div class="main-content">

            <div class="top-bar">

                <form action="/playground" method="get">
                    <button class="nav-button"><i class="fa-solid fa-arrow-right-to-bracket"></i>
                        Leave Room</button>
                </form>

                <div class="more">
                    <i class="fa-solid fa-ellipsis-vertical"></i>
                </div>

            </div>
    
            <div class="room-container">
                <canvas id="whiteboard" width="1000" height="500"></canvas>
                <video id="screenShare" autoplay></video>
                <div class="video-container">
                    <div class="video-box">
                        <div class="vid-username">User 1</div>
                        <video id="user1Video" autoplay></video>
                    </div>
                    <div class="video-box">
                        <div class="vid-username">User 2</div>
                        <!-- <video id="user2Video" autoplay></video> -->
                        <i class="fa-solid fa-video-slash"></i>
                    </div>
                </div>
            </div>
        
            <div class="room-fixed-container">
                <div class="button-container">
                    <button class="room-button" id="whiteboardButton" onclick="toggleWhiteboard()">Whiteboard</button>
                    <button class="room-button" id="screenShareButton" onclick="toggleScreenShare()">Screen Share</button>
                    <button class="room-button" id="clearButton" onclick="clearWhiteboard()" class="broomstick-icon">Clear</button>
                </div>
            </div>

        </div>

        <% } else{ %>
            <p>You are not logged in.</p>
            <% } %>

            <script src="agora.js"></script>


                <script>
                    
        const whiteboard = document.getElementById("whiteboard");
        const screenShare = document.getElementById("screenShare");
        const whiteboardButton = document.getElementById("whiteboardButton");
        const screenShareButton = document.getElementById("screenShareButton");
        const clearButton = document.getElementById("clearButton");
        const canvas = whiteboard.getContext("2d");
        let isDrawing = false;

        async function setupWebcam(videoElement) {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                videoElement.srcObject = stream;
            } catch (error) {
                console.error("Error accessing webcam:", error);
            }
        }

        // Setup webcams for user videos
        setupWebcam(document.getElementById("user1Video"));
        setupWebcam(document.getElementById("user2Video"));

        function toggleWhiteboard() {
            whiteboard.style.display = "block";
            screenShare.style.display = "none";
            clearButton.style.display = "block"; // Show clear button when whiteboard is active
        }

        async function toggleScreenShare() {
            try {
                const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });
                screenShare.srcObject = stream;
                whiteboard.style.display = "none";
                screenShare.style.display = "block";
                clearButton.style.display = "none"; // Hide clear button when screen sharing is active
            } catch (error) {
                console.error("Error accessing screen sharing:", error);
            }
        }

        function clearWhiteboard() {
            canvas.clearRect(0, 0, whiteboard.width, whiteboard.height);
        }

        whiteboard.addEventListener("mousedown", (e) => {
            isDrawing = true;
            canvas.lineWidth = 2;
            canvas.strokeStyle = "#000";
            canvas.beginPath();
            canvas.moveTo(e.clientX - whiteboard.getBoundingClientRect().left, e.clientY - whiteboard.getBoundingClientRect().top);
        });

        whiteboard.addEventListener("mousemove", (e) => {
            if (!isDrawing) return;
            canvas.lineTo(e.clientX - whiteboard.getBoundingClientRect().left, e.clientY - whiteboard.getBoundingClientRect().top);
            canvas.stroke();
        });

        whiteboard.addEventListener("mouseup", () => {
            isDrawing = false;
            canvas.closePath();
        });

        whiteboard.addEventListener("mouseleave", () => {
            isDrawing = false;
            canvas.closePath();
        });




        
        //main webRTC code

//         let appID = "a0727785722f48fc834b077237a9c6f3";


// let token = null;
// let uid = String(Math.floor(Math.random() * 10000))

// // console.log(uid)

// let client;
// let channel;

// let queryString = window.location.search
// let urlParams = new URLSearchParams(queryString)
// let roomId = urlParams.get('room')

// if(!roomId){
//     window.location = 'lobby.html'

// }

// let localStream;
// let remoteStream;
// let peerConnection;


// const servers = {
//     iceServers:[
//         {
//             urls:['stun:stun1.1.google.com:19302', 'stun:stun2.1.google.com:19302']
//         }
//     ]
// }

// let init = async () => {
//     client = AgoraRTM.createInstance(appID)
//     await client.login({uid, token})

//     channel = client.createChannel(roomId)
//     await channel.join()

//     channel.on('MemberJoined', handleUserJoined)
//     channel.on('MemberLeft', handleUserLeft)

//     client.on('MessageFromPeer', handleMessageFromPeer)

//     localStream = await navigator.mediaDevices.getUserMedia({video: true, audio: false})
//     document.getElementById('user-1').srcObject = localStream
// }

// let handleUserLeft = (MemberId) => {
//     document.getElementById('user-2').style.display = 'none'
// }

// let handleMessageFromPeer = async (message, MemberId) =>{
//     message = JSON.parse(message.text)

//     if(message.type === 'offer'){
//         createAnswer(MemberId, message.offer)
//     }

//     if(message.type === 'answer'){
//         addAnswer(message.answer)
//     }

//     if(message.type === 'candidate'){
//         if(peerConnection){
//             peerConnection.addIceCandidate(message.candidate)
//         }
//     }

// }

// let handleUserJoined = async (MemberId) =>{
//     console.log('A new user joined the channel:', MemberId)
//     createOffer(MemberId)
// }

// let createPeerConnection = async (MemberId) =>{

//     peerConnection = new RTCPeerConnection(servers)

//     remoteStream = new MediaStream()
//     document.getElementById('user-2').srcObject = remoteStream
//     document.getElementById('user-2').style.display = 'block'


//     if(!localStream){
//         localStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true})
//         document.getElementById('user-1').srcObject = localStream
//     }


//     localStream.getTracks().forEach((track) => {
//         peerConnection.addTrack(track, localStream)
//     })


//     peerConnection.ontrack = (event) =>{
//         event.streams[0].getTracks().forEach((track) =>{
//             remoteStream.addTrack(track)
//         })
//     }


//     peerConnection.onicecandidate = async (event) =>{
//         if(event.candidate){
//             client.sendMessageToPeer({text:JSON.stringify({'type':'candidate', 'candidate':event.candidate})}, MemberId)

//         }
//     }


// }

// let createOffer = async (MemberId) => {
    
//     await createPeerConnection(MemberId)

//     let offer = await peerConnection.createOffer()
//     await peerConnection.setLocalDescription(offer);

//     client.sendMessageToPeer({text:JSON.stringify({'type':'offer', 'offer':offer})}, MemberId)
// }


// let createAnswer = async (MemberId, offer) => {

//     await createPeerConnection(MemberId)

//     await peerConnection.setRemoteDescription(offer)

//     let answer = await peerConnection.createAnswer()
//     await peerConnection.setLocalDescription(answer)

//     client.sendMessageToPeer({text:JSON.stringify({'type':'answer', 'answer':answer})}, MemberId)
// }

// let addAnswer = async (answer) =>{
//     if(!peerConnection.currentRemoteDescription){
//         peerConnection.setRemoteDescription(answer)
//     }
// }

// let leaveChannel = async () => {
//     await channel.leave()
//     await client.logout()
// }

// let toggleCamera = async () => {
//     let videoTrack = localStream.getTracks().find(track => track.kind === 'video')

//     if(videoTrack.enabled){
//         videoTrack.enabled = false
//         document.getElementById('camera-btn').style.backgroundColor = 'rgb(255, 80, 80)'
//     }else{
//         videoTrack.enabled = true
//         document.getElementById('camera-btn').style.backgroundColor = 'rgb(179, 102, 249, .9)'
//     }
// }

// let toggleMic = async () => {
//     let audioTrack = localStream.getTracks().find(track => track.kind === 'audio')

//     if(audioTrack.enabled){
//         audioTrack.enabled = false
//         document.getElementById('mic-btn').style.backgroundColor = 'rgb(255, 80, 80)'
//     }else{
//         audioTrack.enabled = true
//         document.getElementById('mic-btn').style.backgroundColor = 'rgb(179, 102, 249, .9)'
//     }
// }

// window.addEventListener('beforeunload', leaveChannel)

// document.getElementById('camera-btn').addEventListener('click', toggleCamera)
// document.getElementById('mic-btn').addEventListener('click', toggleMic)


// init()




                </script>
                

                <%- include('./partials/footer') %>